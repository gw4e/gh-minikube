name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Start Minikube
        id: minikube
        run : minikube start
      - name: Check Minikube Status
        run: minikube status
      - name: Get Kubernetes Nodes
        run: kubectl get nodes
      - name: Enable Ingress
        run: minikube addons enable ingress
      - name: Wait for Ingress Controller to Be Ready
        run: |
          timeout=120
          start_time=$(date +%s)
          while [[ "$(kubectl get deployments -n ingress-nginx ingress-nginx-controller -o=jsonpath='{.status.availableReplicas}')" != "1" ]]; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          if [ "$elapsed_time" -ge "$timeout" ]; then
           echo "Ingress Controller did not become ready within the timeout of $timeout seconds."
           exit 1
          fi
          echo "will sleep"
          sleep 5
          done
      - name: Get code
        uses: actions/checkout@v4
      - name: Build Backend Docker Image
        run: |
          cd backend-api
          eval $(minikube -p minikube docker-env)
          docker build -t dev.local/app-backend-api:v1 .
          minikube image ls --format table
      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic my-secret --from-literal=DATABASE_HOST="$GITHUB_SECRET_DATABASE_HOST"
          kubectl create secret generic my-secret --from-literal=DATABASE_NAME="$GITHUB_SECRET_DATABASE_NAME"
          kubectl create secret generic my-secret --from-literal=DATABASE_PWD="$GITHUB_SECRET_DATABASE_PWD"
          kubectl create secret generic my-secret --from-literal=DATABASE_USER="$GITHUB_SECRET_DATABASE_USER"
        env:
          GITHUB_SECRET_DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          GITHUB_SECRET_DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          GITHUB_SECRET_DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
          GITHUB_SECRET_DATABASE_USER: ${{ secrets.DATABASE_USER }}

      - name: Deploy PostgreSQL to Minikube
        run: |
          kubectl apply -f postgres-deployment.yaml
      - name: Wait for PostgreSQL to be ready
        run: |
          until kubectl get pods | grep postgresql | grep "1/1" | grep "Running"; do
            echo "Waiting for PostgreSQL to start..."
            sleep 5
          done
      - name: Execute SQL Statement
        run: |
          kubectl cp create-table.sql $(kubectl get pods | grep postgresql | awk '{print $1}'):/create-table.sql
          kubectl exec $(kubectl get pods | grep postgresql | awk '{print $1}') -- psql -U postgres -d mydb -f /create-table.sql
      - name : Deploy Backend Service
        run : |
          kubectl apply -f backend-api-deployment.yaml
          sleep 10
          kubectl get pods
        env:
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
      - name: Print Start Backend Service
        run: |
          sleep 5
          kubectl logs -l app=backend
      - name : Deploy web server
        run : kubectl apply -f webserver.yaml
      - name : Plug Ingress
        run : kubectl apply -f ingress.yaml
